{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-07T14:33:06.357Z",
    "end": "2023-06-07T14:33:06.663Z",
    "duration": 306,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "776d68da-9510-4992-81a4-f73b5e1d761e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 112,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "newuser = await createUser()",
          "err": {},
          "uuid": "e4d085ca-467c-46dc-920e-144cedbb4386",
          "parentUUID": "776d68da-9510-4992-81a4-f73b5e1d761e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const newUser = await createUser()\nconst response = await axios.post(`${apiUrl}/register`, newUser.payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
          "err": {},
          "uuid": "ce4a269b-ae3e-4316-bdfb-8c91485931d2",
          "parentUUID": "776d68da-9510-4992-81a4-f73b5e1d761e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const newUser = await createUser()\nconst response = await axios.get(`${apiUrl}/${newUser._id}`)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
          "err": {},
          "uuid": "b6ad2bb7-080a-405a-a1e3-54a8250cb369",
          "parentUUID": "776d68da-9510-4992-81a4-f73b5e1d761e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const newUser = await createUser()\nconst response = await axios.get(`${apiUrl}/${newUser._id}`)\nexpect(response.data.name).to.be.equal('johny')\nexpect(response.data.email).to.be.equal('johny@example.com')\nexpect(response.data.age).to.be.equal(591)\nresponse.data.should.have.property('name')\nresponse.data.should.have.property('email')\nresponse.data.should.have.property('age')\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
          "err": {},
          "uuid": "65c7f1c0-efab-4907-bae9-f3a312a40a2a",
          "parentUUID": "776d68da-9510-4992-81a4-f73b5e1d761e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "168af0f4-4b69-4414-ac68-6191ab9fe14c",
          "title": "get users info",
          "fullFile": "/Users/nelli/code/chai-test-nodejs/test/getUsers.js",
          "file": "/test/getUsers.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a list of all users",
              "fullTitle": "get users info should return a list of all users",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${apiUrl}`)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('array')",
              "err": {},
              "uuid": "86c1cc1f-2093-4cd2-98fe-6daaaa95c344",
              "parentUUID": "168af0f4-4b69-4414-ac68-6191ab9fe14c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a user",
              "fullTitle": "get users info should create a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "before(async() => {\n  const newUser = await createUser()\n  const response = await axios.post(`${apiUrl}/register`, newUser.payload)\n  expect(response.status).to.be.equal(200)\n  expect(response.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "d164cd5e-7c93-48b3-97ac-7ee311e6c13f",
              "parentUUID": "168af0f4-4b69-4414-ac68-6191ab9fe14c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a single user",
              "fullTitle": "get users info should return a single user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "before(async() => {\n  const newUser = await createUser()\n  const response = await axios.get(`${apiUrl}/${newUser._id}`)\n  expect(response.status).to.be.equal(200)\n  expect(response.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "79fc986e-9181-4881-b0cf-2b0c4441492b",
              "parentUUID": "168af0f4-4b69-4414-ac68-6191ab9fe14c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have all the properties for each user",
              "fullTitle": "get users info should have all the properties for each user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "before(async() => {\n  const newUser = await createUser()\n  const response = await axios.get(`${apiUrl}/${newUser._id}`)\n  expect(response.data.name).to.be.equal('johny')\n  expect(response.data.email).to.be.equal('johny@example.com')\n  expect(response.data.age).to.be.equal(591)\n  response.data.should.have.property('name')\n  response.data.should.have.property('email')\n  response.data.should.have.property('age')\n  expect(response.status).to.be.equal(200)\n  expect(response.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "8c714a7a-72cb-4ac2-83b4-7ea9b57bc9e8",
              "parentUUID": "168af0f4-4b69-4414-ac68-6191ab9fe14c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86c1cc1f-2093-4cd2-98fe-6daaaa95c344",
            "d164cd5e-7c93-48b3-97ac-7ee311e6c13f",
            "79fc986e-9181-4881-b0cf-2b0c4441492b",
            "8c714a7a-72cb-4ac2-83b4-7ea9b57bc9e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e06b01f4-71d9-4739-8122-544272a11b9d",
          "title": "update user info",
          "fullFile": "/Users/nelli/code/chai-test-nodejs/test/updateUser.js",
          "file": "/test/updateUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update single user with all information together",
              "fullTitle": "update user info should update single user with all information together",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { name: 'john doe', email: 'johndoe@example.com', age: 21 }\nconst response = await axios.put(`${apiUrl}/${newuser._id}`, payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "81e73579-00e4-4bcc-a70d-b754e09d5f14",
              "parentUUID": "e06b01f4-71d9-4739-8122-544272a11b9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update single user with a name",
              "fullTitle": "update user info should update single user with a name",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { name: 'john doe' }\nconst response = await axios.put(`${apiUrl}/${newuser._id}`, payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data.name).not.to.be.equal(payload)",
              "err": {},
              "uuid": "8d570084-223c-4226-9405-4aaa43cfe3c8",
              "parentUUID": "e06b01f4-71d9-4739-8122-544272a11b9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update single user with an email",
              "fullTitle": "update user info should update single user with an email",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { email: 'doe@live.com' }\nconst response = await axios.put(`${apiUrl}/${newuser._id}`, payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data.email).not.to.be.equal(payload)",
              "err": {},
              "uuid": "026c87b7-97ae-4b99-88ed-d44c91b21b9d",
              "parentUUID": "e06b01f4-71d9-4739-8122-544272a11b9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update single user with an age",
              "fullTitle": "update user info should update single user with an age",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { age: 28 }\nconst response = await axios.put(`${apiUrl}/${newuser._id}`, payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data.age).not.to.be.equal(payload)",
              "err": {},
              "uuid": "9360cff7-4e95-4967-afcd-197fcbf614d5",
              "parentUUID": "e06b01f4-71d9-4739-8122-544272a11b9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81e73579-00e4-4bcc-a70d-b754e09d5f14",
            "8d570084-223c-4226-9405-4aaa43cfe3c8",
            "026c87b7-97ae-4b99-88ed-d44c91b21b9d",
            "9360cff7-4e95-4967-afcd-197fcbf614d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 86,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}